#include <opencv2/opencv.hpp>
#include <pangolin/pangolin.h>
#include "core/tensorrt_inference.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <limits>

constexpr float SCORE_THRESHOLD = 0.99f;
constexpr int IMAGE_WIDTH = 1241;
constexpr int IMAGE_HEIGHT = 376;
constexpr int MODEL_IMAGE_SIZE = 1024;

cv::Mat load_calibration(const std::string& path) {
    std::ifstream file(path);
    std::string line;
    while (std::getline(file, line)) {
        if (line.substr(0, 2) == "P0") {
            std::istringstream iss(line.substr(4));
            cv::Mat P0(3, 4, CV_64F);
            for (int i = 0; i < 12; ++i) iss >> P0.at<double>(i / 4, i % 4);
            return P0(cv::Rect(0, 0, 3, 3));
        }
    }
    std::cerr << "P0 not found\n";
    exit(-1);
}

std::vector<cv::Mat> load_poses(const std::string& path, int num_poses) {
    std::ifstream file(path);
    std::vector<cv::Mat> poses;
    std::string line;
    for (int i = 0; i < num_poses && std::getline(file, line); ++i) {
        std::istringstream iss(line);
        cv::Mat pose(3, 4, CV_64F);
        for (int j = 0; j < 12; ++j) iss >> pose.at<double>(j / 4, j % 4);
        poses.push_back(pose);
    }
    if (poses.size() < num_poses) {
        std::cerr << "Failed to load " << num_poses << " poses\n";
        exit(-1);
    }
    return poses;
}

void estimate_pose(const std::vector<cv::Point2f>& points1, const std::vector<cv::Point2f>& points2, const cv::Mat& K,
                  cv::Mat& R, cv::Mat& T) {
    cv::Mat mask;
    cv::Mat E = cv::findEssentialMat(points1, points2, K, cv::RANSAC, 0.999, 1.0, mask);
    cv::recoverPose(E, points1, points2, K, R, T, mask);
    T = -R.t() * T;
    R = R.inv();
}

double compute_rotation_error(const cv::Mat& R_est, const cv::Mat& R_gt) {
    double trace = cv::trace(R_est.t() * R_gt)[0];
    return acos(std::clamp((trace - 1.0) / 2.0, -1.0, 1.0)) * 180.0 / CV_PI;
}

double compute_translation_error(const cv::Mat& T_est, const cv::Mat& T_gt) {
    cv::Mat T_est_3 = T_est(cv::Rect(0, 0, 1, 3));
    cv::Mat T_gt_3 = T_gt(cv::Rect(0, 0, 1, 3));
    double norm_est = cv::norm(T_est_3), norm_gt = cv::norm(T_gt_3);
    if (norm_est == 0 || norm_gt == 0) return 0.0; // Avoid NaN
    double cos_phi = T_est_3.dot(T_gt_3) / (norm_est * norm_gt);
    return acos(std::clamp(cos_phi, -1.0, 1.0)) * 180.0 / CV_PI;
}

void draw_frustum(float scale, float r, float g, float b) {
    glLineWidth(2.0f);
    glBegin(GL_LINES);
    glColor3f(r, g, b);
    float z = 0.8f * scale, s = 0.5f * scale;
    glVertex3f(-s, -s, z); glVertex3f(s, -s, z);
    glVertex3f(s, -s, z);  glVertex3f(s, s, z);
    glVertex3f(s, s, z);   glVertex3f(-s, s, z);
    glVertex3f(-s, s, z);  glVertex3f(-s, -s, z);
    glVertex3f(0, 0, 0);   glVertex3f(-s, -s, z);
    glVertex3f(0, 0, 0);   glVertex3f(s, -s, z);
    glVertex3f(0, 0, 0);   glVertex3f(s, s, z);
    glVertex3f(0, 0, 0);   glVertex3f(-s, s, z);
    glEnd();
}

void visualize_poses(const std::vector<cv::Mat>& est_poses, const std::vector<cv::Mat>& gt_poses,
                     const std::vector<cv::Point3d>& points3D_vec) {
    pangolin::CreateWindowAndBind("Pose and Point Cloud Visualization", 1024, 768);
    glEnable(GL_DEPTH_TEST);
    pangolin::OpenGlRenderState s_cam(
        pangolin::ProjectionMatrix(1024, 768, 500, 500, 512, 389, 0.1, 1000),
        pangolin::ModelViewLookAt(0, -10, -20, 0, 0, 0, 0.0, -1.0, 0.0)
    );
    pangolin::View& d_cam = pangolin::CreateDisplay()
        .SetBounds(0.0, 1.0, 0.0, 1.0, -1024.0f / 768.0f)
        .SetHandler(new pangolin::Handler3D(s_cam));

    while (!pangolin::ShouldQuit()) {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        d_cam.Activate(s_cam);

        // Draw 3D points (white)
        glPointSize(2.0f);
        glBegin(GL_POINTS);
        glColor3f(0.0f, 1.0f, 0.0f);
        for (const auto& pt : points3D_vec) {
            glVertex3d(pt.x, pt.y, pt.z);
        }
        glEnd();

        // Draw estimated poses (red, except first is blue)
        for (size_t i = 0; i < est_poses.size(); ++i) {
            cv::Mat R = est_poses[i](cv::Rect(0, 0, 3, 3));
            cv::Mat T = est_poses[i](cv::Rect(3, 0, 1, 3));
            float T_mat[16] = {
                float(R.at<double>(0,0)), float(R.at<double>(1,0)), float(R.at<double>(2,0)), 0,
                float(R.at<double>(0,1)), float(R.at<double>(1,1)), float(R.at<double>(2,1)), 0,
                float(R.at<double>(0,2)), float(R.at<double>(1,2)), float(R.at<double>(2,2)), 0,
                float(T.at<double>(0)), float(T.at<double>(1)), float(T.at<double>(2)), 1
            };
            glPushMatrix();
            glMultMatrixf(T_mat);
            draw_frustum(1.0f, i == 0 ? 0.0f : 1.0f, 0.0f, i == 0 ? 1.0f : 0.0f);
            glPopMatrix();
        }

        // Draw ground truth poses (green)
        for (size_t i = 0; i < gt_poses.size(); ++i) {
            cv::Mat R = gt_poses[i](cv::Rect(0, 0, 3, 3));
            cv::Mat T = gt_poses[i](cv::Rect(3, 0, 1, 3));
            float T_mat[16] = {
                float(R.at<double>(0,0)), float(R.at<double>(1,0)), float(R.at<double>(2,0)), 0,
                float(R.at<double>(0,1)), float(R.at<double>(1,1)), float(R.at<double>(2,1)), 0,
                float(R.at<double>(0,2)), float(R.at<double>(1,2)), float(R.at<double>(2,2)), 0,
                float(T.at<double>(0)), float(T.at<double>(1)), float(T.at<double>(2)), 1
            };
            glPushMatrix();
            glMultMatrixf(T_mat);
            draw_frustum(1.0f, 0.0f, 1.0f, 0.0f);
            glPopMatrix();
        }

        pangolin::FinishFrame();
    }
    pangolin::DestroyWindow("Pose and Point Cloud Visualization");
}

void triangulate_points(const std::vector<cv::Point2f>& points1, const std::vector<cv::Point2f>& points2,
                        const cv::Mat& P1, const cv::Mat& P2,
                        std::vector<cv::Point3d>& points3D_vec, std::vector<int>& indices) {
    cv::Mat points1_mat(2, points1.size(), CV_64F), points2_mat(2, points2.size(), CV_64F);
    for (size_t i = 0; i < points1.size(); ++i) {
        points1_mat.at<double>(0,i) = points1[i].x; points1_mat.at<double>(1,i) = points1[i].y;
        points2_mat.at<double>(0,i) = points2[i].x; points2_mat.at<double>(1,i) = points2[i].y;
    }
    cv::Mat points3D;
    cv::triangulatePoints(P1, P2, points1_mat, points2_mat, points3D);
    indices.resize(points1.size(), -1);
    for (int i = 0; i < points3D.cols; ++i) {
        double w = points3D.at<double>(3,i);
        if (w != 0 && points3D.at<double>(2,i)/w > 0) { // Positive depth
            points3D_vec.emplace_back(points3D.at<double>(0,i)/w, points3D.at<double>(1,i)/w, points3D.at<double>(2,i)/w);
            indices[i] = points3D_vec.size() - 1;
        }
    }
}

int main() {
    std::string dir_path = "/home/tomato/Downloads/data_odometry_gray/dataset/sequences/00/";
    TensorRTInference infer("../third_party/Superpoint_Lightglue/superpoint_lightglue_pipeline.trt.onnx",
                            "../third_party/Superpoint_Lightglue/superpoint_lightglue_pipeline.trt");

    cv::Mat K = load_calibration(dir_path + "calib.txt");
    float scale_x = float(IMAGE_WIDTH) / MODEL_IMAGE_SIZE;
    float scale_y = float(IMAGE_HEIGHT) / MODEL_IMAGE_SIZE;

    // Data structures
    std::vector<cv::Mat> poses;
    std::vector<cv::Point3d> points3D_vec;
    std::vector<std::vector<cv::Point2f>> image_points; // 2D points per image
    std::vector<std::vector<int>> point_indices;        // 2D-to-3D indices per image

    // Load ground truth
    auto gt_poses = load_poses(dir_path + "00.txt", 4);

    // Step 1: Process images 0 and 1
    std::vector<int64_t> keypoints, matches;
    std::vector<float> scores;
    infer.runInference(dir_path + "image_0/000000.png", dir_path + "image_0/000001.png", keypoints, matches, scores);
    std::vector<cv::Point2f> points0, points1;
    for (size_t m = 0; m < scores.size() && m * 3 + 2 < matches.size(); ++m) {
        if (scores[m] >= SCORE_THRESHOLD && matches[m * 3] == 0) {
            int left_idx = matches[m * 3 + 1], right_idx = matches[m * 3 + 2];
            if (left_idx >= 0 && left_idx < MODEL_IMAGE_SIZE && right_idx >= 0 && right_idx < MODEL_IMAGE_SIZE) {
                points0.emplace_back(keypoints[left_idx * 2] * scale_x, keypoints[left_idx * 2 + 1] * scale_y);
                points1.emplace_back(keypoints[MODEL_IMAGE_SIZE * 2 + right_idx * 2] * scale_x,
                                   keypoints[MODEL_IMAGE_SIZE * 2 + right_idx * 2 + 1] * scale_y);
            }
        }
    }
    std::cout << "Matches 0-1: " << points0.size() << "\n";

    // Estimate pose (no scaling)
    cv::Mat R_est, T_est;
    estimate_pose(points0, points1, K, R_est, T_est);

    // Store poses
    poses.push_back(cv::Mat::eye(3, 4, CV_64F)); // Image 0
    cv::Mat P1(3, 4, CV_64F);
    R_est.copyTo(P1(cv::Rect(0, 0, 3, 3)));
    T_est.copyTo(P1(cv::Rect(3, 0, 1, 3)));
    poses.push_back(P1);

    // Triangulate initial points
    cv::Mat P0 = K * cv::Mat::eye(3, 4, CV_64F);
    cv::Mat P1_proj(3, 4, CV_64F);
    cv::Mat R_rel = R_est.t();
    cv::Mat T_rel = -R_rel * T_est;
    R_rel.copyTo(P1_proj(cv::Rect(0, 0, 3, 3)));
    T_rel.copyTo(P1_proj(cv::Rect(3, 0, 1, 3)));
    P1_proj = K * P1_proj;
    std::vector<int> indices0;
    triangulate_points(points0, points1, P0, P1_proj, points3D_vec, indices0);
    image_points.push_back(points0);
    image_points.push_back(points1);
    point_indices.push_back(indices0);
    point_indices.push_back(indices0); // Same points in image 1

    // Step 2: Process images 1 and 2
    std::vector<int64_t> keypoints12, matches12;
    std::vector<float> scores12;
    infer.runInference(dir_path + "image_0/000001.png", dir_path + "image_0/000002.png", keypoints12, matches12, scores12);
    std::vector<cv::Point2f> points1_second, points2_second;
    for (size_t m = 0; m < scores12.size() && m * 3 + 2 < matches12.size(); ++m) {
        if (scores12[m] >= SCORE_THRESHOLD && matches12[m * 3] == 0) {
            int left_idx = matches12[m * 3 + 1], right_idx = matches12[m * 3 + 2];
            if (left_idx >= 0 && left_idx < MODEL_IMAGE_SIZE && right_idx >= 0 && right_idx < MODEL_IMAGE_SIZE) {
                points1_second.emplace_back(keypoints12[left_idx * 2] * scale_x, keypoints12[left_idx * 2 + 1] * scale_y);
                points2_second.emplace_back(keypoints12[MODEL_IMAGE_SIZE * 2 + right_idx * 2] * scale_x,
                                         keypoints12[MODEL_IMAGE_SIZE * 2 + right_idx * 2 + 1] * scale_y);
            }
        }
    }
    std::cout << "Matches 1-2: " << points1_second.size() << "\n";

    // Associate 3D points
    std::vector<cv::Point3d> points3D_for_pnp;
    std::vector<cv::Point2f> points2_for_pnp;
    std::vector<int> indices2(points2_second.size(), -1);
    for (size_t m = 0; m < points1_second.size(); ++m) {
        double min_dist = std::numeric_limits<double>::max();
        int best_idx = -1;
        for (size_t i = 0; i < image_points[1].size(); ++i) {
            double dist = cv::norm(image_points[1][i] - points1_second[m]);
            if (dist < min_dist) { min_dist = dist; best_idx = i; }
        }
        if (min_dist < 1.0 && best_idx >= 0 && point_indices[1][best_idx] >= 0) {
            int map_idx = point_indices[1][best_idx];
            points3D_for_pnp.push_back(points3D_vec[map_idx]);
            points2_for_pnp.push_back(points2_second[m]);
            indices2[m] = map_idx;
        }
    }

    // PnP for image 2
    cv::Mat rvec, tvec;
    cv::solvePnP(points3D_for_pnp, points2_for_pnp, K, cv::Mat(), rvec, tvec, false, cv::SOLVEPNP_ITERATIVE);
    cv::Mat R_pnp; cv::Rodrigues(rvec, R_pnp);
    cv::Mat R_pnp_inv = R_pnp.t();
    cv::Mat T_pnp_inv = -R_pnp_inv * tvec;
    cv::Mat P2(3, 4, CV_64F);
    R_pnp_inv.copyTo(P2(cv::Rect(0, 0, 3, 3)));
    T_pnp_inv.copyTo(P2(cv::Rect(3, 0, 1, 3)));
    poses.push_back(P2);

    // Triangulate new points for image 2
    std::vector<cv::Point2f> new_points1, new_points2;
    for (size_t m = 0; m < points1_second.size(); ++m) {
        if (indices2[m] == -1) {
            new_points1.push_back(points1_second[m]);
            new_points2.push_back(points2_second[m]);
        }
    }
    if (!new_points1.empty()) {
        std::vector<int> new_indices;
        triangulate_points(new_points1, new_points2, K * poses[1], K * P2, points3D_vec, new_indices);
        for (size_t i = 0; i < new_indices.size(); ++i) {
            if (new_indices[i] >= 0) {
                for (size_t m = 0; m < points1_second.size(); ++m) {
                    if (points1_second[m] == new_points1[i]) {
                        indices2[m] = new_indices[i];
                        break;
                    }
                }
            }
        }
    }
    image_points.push_back(points2_second);
    point_indices.push_back(indices2);

    // Step 3: Process images 2 and 3
    std::vector<int64_t> keypoints23, matches23;
    std::vector<float> scores23;
    infer.runInference(dir_path + "image_0/000002.png", dir_path + "image_0/000003.png", keypoints23, matches23, scores23);
    std::vector<cv::Point2f> points2_third, points3_third;
    for (size_t m = 0; m < scores23.size() && m * 3 + 2 < matches23.size(); ++m) {
        if (scores23[m] >= SCORE_THRESHOLD && matches23[m * 3] == 0) {
            int left_idx = matches23[m * 3 + 1], right_idx = matches23[m * 3 + 2];
            if (left_idx >= 0 && left_idx < MODEL_IMAGE_SIZE && right_idx >= 0 && right_idx < MODEL_IMAGE_SIZE) {
                points2_third.emplace_back(keypoints23[left_idx * 2] * scale_x, keypoints23[left_idx * 2 + 1] * scale_y);
                points3_third.emplace_back(keypoints23[MODEL_IMAGE_SIZE * 2 + right_idx * 2] * scale_x,
                                         keypoints23[MODEL_IMAGE_SIZE * 2 + right_idx * 2 + 1] * scale_y);
            }
        }
    }
    std::cout << "Matches 2-3: " << points2_third.size() << "\n";

    // Associate 3D points
    std::vector<cv::Point3d> points3D_for_pnp3;
    std::vector<cv::Point2f> points3_for_pnp;
    std::vector<int> indices3(points3_third.size(), -1);
    for (size_t m = 0; m < points2_third.size(); ++m) {
        double min_dist = std::numeric_limits<double>::max();
        int best_idx = -1;
        for (size_t i = 0; i < image_points[2].size(); ++i) {
            double dist = cv::norm(image_points[2][i] - points2_third[m]);
            if (dist < min_dist) { min_dist = dist; best_idx = i; }
        }
        if (min_dist < 1.0 && best_idx >= 0 && point_indices[2][best_idx] >= 0) {
            int map_idx = point_indices[2][best_idx];
            points3D_for_pnp3.push_back(points3D_vec[map_idx]);
            points3_for_pnp.push_back(points3_third[m]);
            indices3[m] = map_idx;
        }
    }

    // PnP for image 3
    cv::Mat rvec3, tvec3;
    cv::solvePnP(points3D_for_pnp3, points3_for_pnp, K, cv::Mat(), rvec3, tvec3, false, cv::SOLVEPNP_ITERATIVE);
    cv::Mat R_pnp3; cv::Rodrigues(rvec3, R_pnp3);
    cv::Mat R_pnp_inv3 = R_pnp3.t();
    cv::Mat T_pnp_inv3 = -R_pnp_inv3 * tvec3;
    cv::Mat P3(3, 4, CV_64F);
    R_pnp_inv3.copyTo(P3(cv::Rect(0, 0, 3, 3)));
    T_pnp_inv3.copyTo(P3(cv::Rect(3, 0, 1, 3)));
    poses.push_back(P3);

    // Triangulate new points for image 3
    std::vector<cv::Point2f> new_points2_third, new_points3_third;
    for (size_t m = 0; m < points2_third.size(); ++m) {
        if (indices3[m] == -1) {
            new_points2_third.push_back(points2_third[m]);
            new_points3_third.push_back(points3_third[m]);
        }
    }
    if (!new_points2_third.empty()) {
        std::vector<int> new_indices;
        triangulate_points(new_points2_third, new_points3_third, K * poses[2], K * P3, points3D_vec, new_indices);
        for (size_t i = 0; i < new_indices.size(); ++i) {
            if (new_indices[i] >= 0) {
                for (size_t m = 0; m < points2_third.size(); ++m) {
                    if (points2_third[m] == new_points2_third[i]) {
                        indices3[m] = new_indices[i];
                        break;
                    }
                }
            }
        }
    }
    image_points.push_back(points3_third);
    point_indices.push_back(indices3);

    // Output results
    for (size_t i = 0; i < poses.size(); ++i) {
        cv::Mat R = poses[i](cv::Rect(0, 0, 3, 3));
        cv::Mat T = poses[i](cv::Rect(3, 0, 1, 3));
        cv::Mat R_gt = gt_poses[i](cv::Rect(0, 0, 3, 3));
        cv::Mat T_gt = gt_poses[i](cv::Rect(3, 0, 1, 3));
        std::cout << "Image " << i << ":\n";
        std::cout << "Estimated T: " << T.t() << "\n";
        std::cout << "Ground Truth T: " << T_gt.t() << "\n";
        std::cout << "Rotation Error: " << compute_rotation_error(R, R_gt) << " deg\n";
        std::cout << "Translation Error: " << compute_translation_error(T, T_gt) << " deg\n\n";
    }

    // Print number of 3D points for debugging
    std::cout << "Total 3D points: " << points3D_vec.size() << "\n";

    visualize_poses(poses, gt_poses, points3D_vec);
    return 0;
}